<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


	<bean id="authenticationManager"
		class="org.jasig.cas.authentication.PolicyBasedAuthenticationManager">
		<constructor-arg>
			<map>
				<!-- | IMPORTANT | Every handler requires a unique name. | If more than 
					one instance of the same handler class is configured, you must explicitly 
					| set its name to something other than its default name (typically the simple 
					class name). -->
				<entry key-ref="proxyAuthenticationHandler" value-ref="proxyPrincipalResolver" />
				<entry key-ref="primaryAuthenticationHandler" value-ref="primaryPrincipalResolver" />
			</map>
		</constructor-arg>

		<!-- Uncomment the metadata populator to allow clearpass to capture and 
			cache the password This switch effectively will turn on clearpass. <property 
			name="authenticationMetaDataPopulators"> <util:list> <bean class="org.jasig.cas.extension.clearpass.CacheCredentialsMetaDataPopulator" 
			c:credentialCache-ref="encryptedMap" /> </util:list> </property> -->

		<!-- | Defines the security policy around authentication. Some alternative 
			policies that ship with CAS: | | * NotPreventedAuthenticationPolicy - all 
			credential must either pass or fail authentication | * AllAuthenticationPolicy 
			- all presented credential must be authenticated successfully | * RequiredHandlerAuthenticationPolicy 
			- specifies a handler that must authenticate its credential to pass -->
		<property name="authenticationPolicy">
			<bean class="org.jasig.cas.authentication.AnyAuthenticationPolicy" />
		</property>
	</bean>

	<!-- Required for proxy ticket mechanism. -->
	<bean id="proxyAuthenticationHandler"
		class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
		p:httpClient-ref="httpClient" p:requireSecure="false" />

	<!-- | TODO: Replace this component with one suitable for your enviroment. 
		| | This component provides authentication for the kind of credential used 
		in your environment. In most cases | credential is a username/password pair 
		that lives in a system of record like an LDAP directory. | The most common 
		authentication handler beans: | | * org.jasig.cas.authentication.LdapAuthenticationHandler 
		| * org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler | * org.jasig.cas.adaptors.x509.authentication.handler.support.X509CredentialsAuthenticationHandler 
		| * org.jasig.cas.support.spnego.authentication.handler.support.JCIFSSpnegoAuthenticationHandler -->



	<!-- 手动注释 -->
	<!-- <bean id="primaryAuthenticationHandler" class="org.jasig.cas.authentication.AcceptUsersAuthenticationHandler"> 
		<property name="users"> <map> <entry key="casuser" value="Mellon"/> </map> 
		</property> </bean> -->

	<!-- 现在使用的是默认编码方式，以后可以修改成自己所需要的方式，继承DefaultPasswordEncoder，重写encode就行 -->
	<bean id="passwordEncoder"
		class="org.jasig.cas.authentication.handler.DefaultPasswordEncoder"
		c:encodingAlgorithm="MD5" p:characterEncoding="UTF-8" />
		
	<!-- 使用查询数据库的方式验证登陆用户 -->
	<bean id="primaryAuthenticationHandler"
		class="org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler">
		<property name="dataSource" ref="dataSource" />
		<property name="sql"
			value="select password from user where lower(account) = lower(?)" />
		<property name="passwordEncoder" ref="passwordEncoder" />
	</bean>

	<!-- 数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="10" />
		<property name="maxIdle" value="5" />
	</bean>




	<!-- Required for proxy ticket mechanism -->
	<bean id="proxyPrincipalResolver"
		class="org.jasig.cas.authentication.principal.BasicPrincipalResolver" />

	<!-- | Resolves a principal from a credential using an attribute repository 
		that is configured to resolve | against a deployer-specific store (e.g. LDAP). -->
	<bean id="primaryPrincipalResolver"
		class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver">
		<property name="attributeRepository" ref="attributeRepository" />
	</bean>

	<!-- Bean that defines the attributes that a service may return. This example 
		uses the Stub/Mock version. A real implementation may go against a database 
		or LDAP server. The id should remain "attributeRepository" though. + -->
	<!-- <bean id="attributeRepository" class="org.jasig.services.persondir.support.StubPersonAttributeDao" 
		p:backingMap-ref="attrRepoBackingMap" /> <util:map id="attrRepoBackingMap"> 
		<entry key="uid" value="uid" /> <entry key="eduPersonAffiliation" value="eduPersonAffiliation" 
		/> <entry key="groupMembership" value="groupMembership" /> </util:map> -->
	
	<!-- 自定义类：与用户信息相关，比如从数据库获取用户的完整信息 -->
	<bean id="attributeRepository"
		class="org.jasig.services.persondir.support.BlogStubPersonAttributeDao" />
	<!-- Sample, in-memory data store for the ServiceRegistry. A real implementation 
		would probably want to replace this with the JPA-backed ServiceRegistry DAO 
		The name of this bean should remain "serviceRegistryDao". + -->
	<bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl"
		p:registeredServices-ref="registeredServicesList" />

	<util:list id="registeredServicesList">
		<bean class="org.jasig.cas.services.RegexRegisteredService" p:id="0"
			p:name="HTTP and IMAP" p:description="Allows HTTP(S) and IMAP(S) protocols"
			p:serviceId="^(https?|imaps?)://.*" p:evaluationOrder="10000001" />
		<!-- Use the following definition instead of the above to further restrict 
			access to services within your domain (including sub domains). Note that 
			example.com must be replaced with the domain you wish to permit. This example 
			also demonstrates the configuration of an attribute filter that only allows 
			for attributes whose length is 3. -->
		<!-- <bean class="org.jasig.cas.services.RegexRegisteredService"> <property 
			name="id" value="1" /> <property name="name" value="HTTP and IMAP on example.com" 
			/> <property name="description" value="Allows HTTP(S) and IMAP(S) protocols 
			on example.com" /> <property name="serviceId" value="^(https?|imaps?)://([A-Za-z0-9_-]+\.)*example\.com/.*" 
			/> <property name="evaluationOrder" value="0" /> <property name="attributeFilter"> 
			<bean class="org.jasig.cas.services.support.RegisteredServiceRegexAttributeFilter" 
			c:regex="^\w{3}$" /> </property> </bean> -->
	</util:list>

	<bean id="auditTrailManager"
		class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />

	<bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor"
		p:monitors-ref="monitorsList" />

	<util:list id="monitorsList">
		<bean class="org.jasig.cas.monitor.MemoryMonitor"
			p:freeMemoryWarnThreshold="10" />
		<!-- NOTE The following ticket registries support SessionMonitor: * DefaultTicketRegistry 
			* JpaTicketRegistry Remove this monitor if you use an unsupported registry. -->
		<bean class="org.jasig.cas.monitor.SessionMonitor"
			p:ticketRegistry-ref="ticketRegistry"
			p:serviceTicketCountWarnThreshold="5000" p:sessionCountWarnThreshold="100000" />
	</util:list>
</beans>
